datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model Role {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?  

  users         User[]          // Relación de uno a muchos con el modelo User
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  phone         String?         // Número de teléfono opcional
  roleId        Int             @default(1)   // Llave foránea a la tabla Role
  
  accounts      Account[]
  documents     Document[]
  mentor        Mentor?
  student       Student?
  authority     Authority?
  
  role          Role?           @relation(fields: [roleId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Mentor {
  id            Int             @id @default(autoincrement())
  userId        String          @unique
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  groups        Group[]         // Relación de uno a muchos con grupos (un mentor puede tener varios grupos)
  
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id                  Int       @id @default(autoincrement())
  userId              String    @unique // Llave foránea que apunta a User
  groupId             Int? 
  subjectId           Int?      // Relación con la tabla `Subject`
  semesterId          Int       // Relación con la tabla Semestre
  registrationNumber  String?   // Número de matrícula del estudiante
  isActive            Boolean   @default(true)

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group               Group?    @relation(fields: [groupId], references: [id], onDelete: SetNull)
  subject             Subject?  @relation(fields: [subjectId], references: [id])
  semester            Semester  @relation(fields: [semesterId], references: [id])
}

model Group {
  id            Int             @id @default(autoincrement())
  name          String          // Nombre o título del grupo
  titleProject  String?         // Título del trabajo de investigación
  subjectId     Int             @default(1)
  semesterId    Int             // Relación con la tabla Semestre
  mentorId      Int?            // Relación con Mentor (un asesor por grupo)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())

  students      Student[]
  documents     Document[]
  mentor        Mentor?         @relation(fields: [mentorId], references: [id], onDelete: SetNull)
  subject       Subject         @relation(fields: [subjectId], references: [id])
  semester      Semester        @relation(fields: [semesterId], references: [id])

  @@unique([name, subjectId, semesterId])
}

model Semester {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  
  students      Student[]
  groups        Group[]
  documents     Document[]
}

model Subject {
  id            Int             @id @default(autoincrement())
  name          String

  students      Student[]
  groups        Group[]
  documents     Document[]
}

model Authority {
  id            Int             @id @default(autoincrement())
  userId        String          @unique  // user_id INT NOT NULL

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@unique([userId, provider])
}

model Document {
  id              Int           @id @default(autoincrement())
  name            String
  typeId          Int
  userId          String
  groupId         Int?
  subjectId       Int?
  semesterId      Int?
  isGlobal        Boolean       @default(false)
  
  uploadDate      DateTime      @default(now())
  size            Float
  content         Bytes         // Archivo almacenado en formato binario
  extractedText   String?       // Campo para almacenar el texto extraído del archivo

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  group           Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  subject         Subject?      @relation(fields: [subjectId], references: [id])
  semester        Semester?     @relation(fields: [semesterId], references: [id])
  documentType    DocumentType  @relation(fields: [typeId], references: [id])

  @@unique([name, groupId, subjectId, semesterId])
}

model DocumentType {
  id              Int           @id @default(autoincrement())
  name            String    

  documents       Document[]
}