datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model Role {
  id            Int      @id @default(autoincrement())  // ID autoincremental
  name          String   @unique
  description   String?  

  users         User[]   // Relación de uno a muchos con el modelo User
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  phone         String?         // Número de teléfono opcional
  roleId        Int?            @default(1)   // Llave foránea a la tabla Role
  
  accounts      Account[]
  
  mentor        Mentor?
  student       Student?
  authority     Authority?
  
  role          Role?            @relation(fields: [roleId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Mentor {
  id            Int             @id @default(autoincrement())
  userId        String          @unique
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  students      Student[]

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id                  Int       @id @default(autoincrement())
  userId              String    @unique // Llave foránea que apunta a User
  mentorId            Int?      // Campo opcional
  group               String?    // Grupo del estudiante
  registrationNumber  String?    // Número de matrícula del estudiante
  titleProject        String?    // Título del trabajo de investigación

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor              Mentor?   @relation(fields: [mentorId], references: [id], onDelete: SetNull)
}


model Authority {
  id            Int             @id @default(autoincrement())
  userId        String          @unique  // user_id INT NOT NULL

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@unique([userId, provider])
}

model Document {
  id              Int       @id @default(autoincrement())
  name            String    // Nombre del documento
  typeId          Int       // Llave foránea que apunta a DocumentType
  uploadDate      DateTime  @default(now()) // Fecha de subida
  size            Float     // Tamaño del archivo en bytes
  content         Bytes     // Contenido binario del archivo
  
  documentType    DocumentType @relation(fields: [typeId], references: [id])
}

model DocumentType {
  id              Int       @id @default(autoincrement())
  name            String    

  documents       Document[]
}